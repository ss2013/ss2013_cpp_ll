Class FileSymItem has an attribute of name. Class File and Dir are both derived classes of FileSymItem. Now you are required to implement to implement these three classes. Notice

1. getSize returns the size of a file or a directory. Notice: the directory size is the summation of all sizes of files in that directory.
2.Since new files or new directories can be added into a directory you must implement function addFileSysItem and function delFileSymItem. It is assumed that the number of files in one directory will not exceed 20, and the items added are stored sequentially according to time of their being added.
3.The classes’ implementations have been given partially in the following code segments. 
 
#include <iostream>
#include <string>
using namespace std;
 
//抽象类，文件系统的项
class FileSymItem{
protected:
    //文件系统项的名字
    string name;
public:
    FileSymItem(const string& name);

    //重命名
    void rename(const string& name);
 
    /**
     * 返回项占用的磁盘空间
     */
    virtual int getSize() = 0;
};
 
/**
 * 文件是一个文件系统里边的项继承FileSymItem
 */
class File: public FileSymItem{
public:
    File(const string& name, const int& s = 0);
    virtual int getSize();
 
    //修改文件的大小
    void setSize(const int& size);
 
    ~File(){
        cout << "Del File : " << name << endl;
    };
private:
    //文件占用的磁盘空间
    int size;
};
/**
 * 文件夹是一个文件系统里边的项继承FileSymItem
 */
class Dir: public FileSymItem{
private:
    //假设文件夹里边最多只会有个20项
    static const int MAX_ITEM_COUNT = 20;
    FileSymItem* children[MAX_ITEM_COUNT];
    int count;
public:
    Dir(const string& name);
 
    /**
     * 往文件夹添加FileSymItem （即是说可以添加文件夹/文件）
     * @param newItem 新增项
     * @return 无
     */
    void addFileSymItem(FileSymItem* newItem);
 
   /**
    * 往文件夹删除FileSymItem （即是说可以删除文件夹/文件）
    * @param delItem 删除项
    * @return 无
    */
    void delFileSymItem(FileSymItem* delItem);
   
    virtual int getSize();
   
    ~Dir(){
        cout << "Del Dir : " << name << endl;
    };

